image: tico/docker

stages:
  - build
  - deploy

.up: &up
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

build-production:
  stage: build
  only:
    - master
  services:
    - docker:dind
  <<: *up
  script:
    #- docker build -f web.production.Dockerfile --build-arg DATABASE_URL=$PRODUCTION_DATABASE_URL --build-arg SECRET_KEY_BASE=$SECRET_KEY_BASE .
    - docker build -f web.production.Dockerfile -t $CI_REGISTRY_IMAGE --build-arg DATABASE_URL=$DATABASE_URL_PRODUCTION --build-arg SECRET_KEY_BASE=$SECRET_KEY_BASE .
    - docker push $CI_REGISTRY_IMAGE
  tags:
    - production

build-staging:
  stage: build
  only:
    - staging
  services:
    - docker:dind
  <<: *up
  script:
    #- docker build -f web.staging.Dockerfile --build-arg DATABASE_URL=$PRODUCTION_DATABASE_URL --build-arg SECRET_KEY_BASE=$SECRET_KEY_BASE .
    - docker build -f web.staging.Dockerfile -t $CI_REGISTRY_IMAGE --build-arg DATABASE_URL=$DATABASE_URL_STAGING --build-arg SECRET_KEY_BASE=$SECRET_KEY_BASE .
    - docker push $CI_REGISTRY_IMAGE
  tags:
    - staging

deploy_production:
  stage: deploy
  only:
    - master
  environment:
    name: production
    url: https://docker.obook.co
  script:
    - cibu prepare-ssh
    - cibu compose login gitlab-ci-token $CI_JOB_TOKEN $CI_REGISTRY
    - scp -r /builds/$CI_PROJECT_PATH/docker_compose.yml $PRODUCTION_TARGET_HOST:/var/app/production_app
    - cibu compose pull
    - cibu compose update web
    - cibu compose up -d --no-deps --no-recreate
    - cibu compose cleanup
  tags:
    - production

deploy_staging:
  stage: deploy
  only:
    - staging
  environment:
    name: staging
    url: https://beta.obook.co
  script:
    - cibu prepare-ssh
    - cibu compose login gitlab-ci-token $CI_JOB_TOKEN $CI_REGISTRY
    - scp -r /builds/$CI_PROJECT_PATH/docker_compose.yml STAGING_TARGET_HOST:/var/app/staging_app
    - cibu compose pull
    - cibu compose update web
    - cibu compose up -d --no-deps --no-recreate
    - cibu compose cleanup
  tags:
    - staging
